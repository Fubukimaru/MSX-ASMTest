; EXECUTE BFS
; HL:	Y-X POSITION INITIAL
; C:	WHAT TO SEARCH
BFS:
;INIT QUEUE WITH INITIAL POSITION
	CALL	INIT_Q
	
	LD	A, E			;ENQUEUE X
	CALL	ENQUEUE16
	LD	A, D			;ENQUEUE Y
	CALL	ENQUEUE16
	
;WHILE QUEUE IS NOT EMPTY || Not target
.WHILE:
	; GET FROM QUEUE
	CALL	DEQUEUE16		;POSITION IN DE
	
	; IS TARGET?   		MAP[Y*SIZE + X]
	
	
	;------¿BORRAR ESTO?----------- ASIDOASIHFOASIHFOI
	;MULTIPLY BY 16 (2^4) [SIZE]
	SLA	A
	SLA	A
	SLA	A
	SLA	A
	
	ADD	A, E			; Y*SIZE + X
	
	LD	HL, V_MAP
	ADD	L, A			;MAP[Y*SIZE+X]
	ADC	H, 0			;ADD CARRY IF AVAILABLE.
	;------¿BORRAR ESTO?-----------
	;LD	A, (HL)			; WE GET MAP[Y*SIZE+X] VALUE
	
	
	;EXPAND NODES	
	LD	A, ' '			; FREE SPOT
	PUSH	HL
		;CHECK IF VISITED
		;MARK WHERE DO WE COME FROM
	

.UP:
	SUB	HL, 16			; -SIZE
	LD	A, (HL)
	
	;IS TARGET?
	CP	'G'
	JP	Z, .FWHILE		; TARGET FOUND	
	;HAS BEEN VISITED?
	CP	(HL)
	JP	NZ, .DOWN		; ALREADY VISITED, SKIP.	
	LD	(HL), 'D'		; WE COME FROM DOWN POSITION
	
	;ENQUEUE NEXT
	LD	A, L
	CALL	ENQUEUE	
	LD	A, H
	CALL	ENQUEUE
.DOWN:
	ADD	HL, 16			; -SIZE
	LD	A, (HL)
	
	;IS TARGET?
	CP	'G'
	JP	Z, .FWHILE		; TARGET FOUND	
	;HAS BEEN VISITED?
	CP	(HL)
	JP	NZ, .LEFT		; ALREADY VISITED, SKIP.	
	LD	(HL), 'U'		; WE COME FROM DOWN POSITION
	
	;ENQUEUE NEXT
	LD	A, L
	CALL	ENQUEUE	
	LD	A, H
	CALL	ENQUEUE
.LEFT:		
	DEC	HL			; -SIZE
	LD	A, (HL)
	
	;IS TARGET?
	CP	'G'
	JP	Z, .FWHILE		; TARGET FOUND	
	;HAS BEEN VISITED?
	CP	(HL)
	JP	NZ, .RIGHT		; ALREADY VISITED, SKIP.	
	LD	(HL), 'R'		; WE COME FROM DOWN POSITION
	
	;ENQUEUE NEXT
	LD	A, L
	CALL	ENQUEUE	
	LD	A, H
	CALL	ENQUEUE
.RIGHT:
	INC	HL			; -SIZE
	LD	A, (HL)
	
	;IS TARGET?
	CP	'G'
	JP	Z, .FWHILE		; TARGET FOUND	
	;HAS BEEN VISITED?
	CP	(HL)
	JP	NZ, .FEXPANSION		; ALREADY VISITED, SKIP.	
	LD	(HL), 'L'		; WE COME FROM DOWN POSITION
	
	;ENQUEUE NEXT
	LD	A, L
	CALL	ENQUEUE	
	LD	A, H
	CALL	ENQUEUE
	
.FEXPANSION:
	CALL	IS_QUEUE_EMPTY
	LD		B, A
	DJNZ	.WHILE
;FWHILE
.FWHILE:

	RET
